// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

model Course {
  id           String       @id @default(uuid())
  user_id      String
  title        String       @db.Text
  description  String?      @db.Text
  image_url    String?      @db.Text
  price        Float?
  is_published Boolean      @default(false)
  attachments  Attachment[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  category_id  String?
  category     Category?    @relation(fields: [category_id], references: [id])
  chapters     Chapter[]
  purchase     Purchase[]

  @@index([category_id])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id         String   @id @default(uuid())
  name       String
  url        String   @db.Text
  course_id  String
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([course_id])
}

model Chapter {
  id           String  @id @default(uuid())
  title        String
  description  String? @db.Text
  video_url    String? @db.Text
  position     Int
  is_published Boolean @default(false)
  is_free      Boolean @default(false)

  mux_data MuxData?

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  user_progress UserProgress[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([course_id])
}

model MuxData {
  id          String  @default(uuid())
  asset_id    String?
  playback_id String?

  chapter_id String  @unique
  chapter    Chapter @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String   @id @default(uuid())
  user_id    String
  chapter_id String
  Chapter    Chapter? @relation(fields: [chapter_id], references: [id], onDelete: Cascade)

  is_completed Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, chapter_id]) // must be a unique combination of this ids
  @@index([chapter_id])
}

model Purchase {
  id      String @id @default(uuid())
  user_id String

  course_id String
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([course_id])
}

model Customer {
  id                 String @id @default(uuid())
  user_id            String @unique
  stripe_customer_id String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
